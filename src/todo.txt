// Datastructures
/* TODOs
    - Lists and list macros 
    - Metaprogramming or parsing
*/
{
    void* memory = malloc(mb(10));
    typedef u32 NodeFlags;
    enum {
        NodeFlag_MaskSetDelimiters          = (0x3F<<0),
        NodeFlag_HasParenLeft               = (1<<0),
        NodeFlag_HasParenRight              = (1<<1),
        NodeFlag_HasBracketLeft             = (1<<2),
        NodeFlag_HasBracketRight            = (1<<3),
        NodeFlag_HasBraceLeft               = (1<<4),
        NodeFlag_HasBraceRight              = (1<<5),
        
        NodeFlag_MaskSeparators             = (0xF<<6),
        NodeFlag_IsBeforeSemicolon          = (1<<6),
        NodeFlag_IsAfterSemicolon           = (1<<7),
        NodeFlag_IsBeforeComma              = (1<<8),
        NodeFlag_IsAfterComma               = (1<<9),
    };

    enum NodeKind {
        NodeKind_Nil,
        NodeKind_File,
        NodeKind_Tag,
        NodeKind_List,
        NodeKind_COUNT
    };

    enum MsgKind {
        MsgKind_Null,
        MsgKind_Note,
        MsgKind_Warning,
        MsgKind_Error,
        MsgKind_COUNT
    };

    struct Node {
        // tree links
        Node* first;
        Node* last;
        Node* parent;
        Node* prev;
        Node* next;

        // node info
        NodeFlags flags;
    };

    struct Msg {
        Msg* next;
        Node* node;
        Str8 string;
        NodeKind kind;
    };

    struct MsgList {
        Msg* first;
        Msg* last;
        u32 count;
    };

}
{

    GameState game = {0};
    game.x = 4;
    game.y = 3;

    uint64_t ptr_to_game = (uint64_t) &game;
    GameState* same_game = (GameState*) ptr_to_game;


    /*  What exactly the difference between a uint64_t pointer and a uint64_t value? Both are 8 bytes.
        Because initially I thought I had to cast &game to uint64_t*, not to a uint64_t.
    */
}

{
    enum Type 
    {
        Type1,
        Type2,
    }; 
    struct Params 
    {
        Type type;
        union {
            struct 
            {
                int x,w;
            } type1;
            struct Type2
            {
                int x,y,z;
            }type2;
        };
    };

    Params t1_params = {0};
    t1_params.type = Type1;
    t1_params.type1.x = 11;
    t1_params.type1.w = 12;

    Params t2_params = {0};
    t2_params.type = Type2;
    t2_params.type2.x = 100;
    t2_params.type2.y = 101;
    t2_params.type2.z = 102;

    t2_params.type1.w = 102;

    struct Type1Params 
    {
        int x;
        int w;
    };

    struct Type2Params 
    {
        int x;
        int y;
        int z;
    };

    typedef struct ParamsM 
    {
        enum Type type;
        union {
            struct Type1Params t1;
            struct Type2Params t2;
        }; //data;
    } ParamsM;

    ParamsM t1_paramsM = {0};
    t1_paramsM.type = Type1;
    t1_paramsM.t1.x = 11;
    t1_paramsM.t1.w = 12;

    ParamsM t2_paramsM = {0};
    t2_paramsM.type = Type2;
    t2_paramsM.t2.x = 100;
    t2_paramsM.t2.y = 101;
    t2_paramsM.t2.z = 102;

    t2_paramsM.t1.w = 102;

    int x = 321321;
}